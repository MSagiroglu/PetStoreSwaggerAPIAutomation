package requests;

import base_url.PetStoreApiBaseUrl;
import com.github.javafaker.Faker;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.testng.Assert.*;
import org.testng.annotations.Test;
import pojos.CategoryPojo;
import pojos.PetPojo;
import pojos.TagsPojo;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import static io.restassured.RestAssured.given;
import static org.testng.Assert.assertEquals;

public class PetAPIRequests extends PetStoreApiBaseUrl {
//  static Faker faker = new Faker();
//  static Integer tagsId = faker.number().randomDigit();
//  static String tagsName = faker.name().name();
//  static String photoUrl = faker.internet().url();
//  static Integer categoryId = faker.number().randomDigit();
//  static String categoryName = faker.name().name();
//  static String petName = faker.name().name();
//  static Long petId = faker.number().randomNumber();
//  static String[] petStatus = new String[]{"available", "sold", "pending"};
//  static String petStatus1 = petStatus[new Random().nextInt(petStatus.length)];
//  static List<TagsPojo> tags = Arrays.asList(new TagsPojo(tagsId, tagsName));
//  static List<String> photoUrls = Arrays.asList(photoUrl);
//  static CategoryPojo category = new CategoryPojo(categoryId, categoryName);


    @Test(priority = 1)
    public static void post() {
        // 1- Set the URL
        spec.pathParams("first", "pet");
        // 2- Set the expected data

        PetPojo payload = new PetPojo(petId, category, petName, photoUrls, tags, petStatus1);
        System.out.println("payload = " + payload);
        // 3- Send the request and get the response
        Response response = given().spec(spec).contentType(ContentType.JSON).body(payload).when().post("{first}");
        response.prettyPrint();


        // 4- Verify the response
        PetPojo actualData = response.as(PetPojo.class);
        System.out.println("actualData = " + actualData);
        assertEquals(200, response.statusCode());
        assertEquals(actualData.getName(), payload.getName());
        assertEquals(actualData.getCategory().getId(), payload.getCategory().getId());
        assertEquals(actualData.getCategory().getName(), payload.getCategory().getName());
        assertEquals(actualData.getTags(), payload.getTags());
        assertEquals(actualData.getStatus(), payload.getStatus());
        assertEquals(actualData.getPhotoUrls(), payload.getPhotoUrls());
        assertEquals(actualData.getId(), payload.getId());
    }

    @Test(priority = 3, dependsOnMethods = "post")
    public void getById() {
        // 1- Set the URL
        spec.pathParams("first", "pet", "second", petId);
        // 2- Send the request and get the response
        Response response = given().spec(spec).contentType(ContentType.JSON).when().get("{first}/{second}");
        response.prettyPrint();
        // 3- Verify the response
        PetPojo actualData = response.as(PetPojo.class);
        System.out.println("actualData = " + actualData);
        assertEquals(200, response.statusCode());
        assertEquals(actualData.getName(), "MustafaTest");
        assertEquals(actualData.getCategory().getId(), categoryId);
        assertEquals(actualData.getCategory().getName(), categoryName);
        assertEquals(actualData.getTags(), Collections.singletonList(new TagsPojo(tagsId, tagsName)));
        assertEquals(actualData.getStatus(), "sold");
        assertEquals(actualData.getPhotoUrls(), Collections.singletonList(photoUrl));
        assertEquals(actualData.getId(), petId);
    }




    @Test(priority = 2,dependsOnMethods = "post")
    public void put() {
        // 1- Set the URL
        spec.pathParams("first", "pet");
        // 2- Set the expected data
        PetPojo payload = new PetPojo(petId, category, "MustafaTest", photoUrls, tags, "sold");
        System.out.println("payload = " + payload);
        // 3- Send the request and get the response
        Response response = given()
                                    .spec(spec)
                                    .contentType(ContentType.JSON)
                                    .body(payload)
                                    .when()
                                    .put("{first}");
        response.prettyPrint();
        // 4- Verify the response
        PetPojo actualData = response.as(PetPojo.class);
        System.out.println("actualData = " + actualData);
        assertEquals(200, response.statusCode());
        assertEquals(actualData.getName(), payload.getName());
        assertEquals(actualData.getCategory().getId(), payload.getCategory().getId());
        assertEquals(actualData.getCategory().getName(), payload.getCategory().getName());
        assertEquals(actualData.getTags(), payload.getTags());
        assertEquals(actualData.getStatus(), payload.getStatus());
        assertEquals(actualData.getPhotoUrls(), payload.getPhotoUrls());
    }

    @Test(priority = 5,dependsOnMethods = "post")
    public void getByStatus() {
        // 1- Set the URL
        spec.pathParams("first", "pet", "second", "findByStatus").queryParam("status", petStatus1); // Durum parametresini ayarlayÄ±n
        // 2- Send the request and get the response
        Response response = given().spec(spec).contentType(ContentType.JSON).when().get("{first}/{second}");
        System.out.println("petStatus = " + petStatus1);
        response.prettyPrint();
        // 3- Verify the response
        List<PetPojo> actualData = Arrays.asList(response.getBody().as(PetPojo[].class));
        //List<PetPojo> actualData = response.as(List.class);
        System.out.println("actualData = " + actualData);
        assertEquals(200, response.statusCode());

        for (PetPojo pet : actualData) {
            assertEquals(pet.getStatus(), petStatus1);
        }
    }

    @Test(priority = 4,dependsOnMethods = {"post","put"})
    public void delete() {
        // 1- Set the URL
        spec.pathParams("first", "pet", "second", petId);

        // 2- Send the request and get the response
        Response response = given().spec(spec).contentType(ContentType.JSON).header("api_key", "special-key").when().delete("{first}/{second}");
        response.prettyPrint();
        // 3- Verify the response
        assertEquals(200, response.statusCode());
        assertEquals(response.body().jsonPath().getString("message"), petId.toString());
    }

}
